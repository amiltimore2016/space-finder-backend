"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenericTable = void 0;
const aws_dynamodb_1 = require("aws-cdk-lib/aws-dynamodb");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_lambda_nodejs_1 = require("aws-cdk-lib/aws-lambda-nodejs");
const aws_apigateway_1 = require("aws-cdk-lib/aws-apigateway");
const path_1 = require("path");
class GenericTable {
    constructor(stack, props) {
        this.props = props;
        this.stack = stack;
        this.initialize();
    }
    initialize() {
        this.createTable();
        this.createLambdas();
        this.grantTableRights();
    }
    createTable() {
        this.table = new aws_dynamodb_1.Table(this.stack, this.props.tableName, {
            partitionKey: {
                name: this.props.primaryKey,
                type: aws_dynamodb_1.AttributeType.STRING
            },
            tableName: this.props.tableName,
            removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY
        });
    }
    createLambdas() {
        if (this.props.createLambdaPath) {
            this.createLambda = this.createSingleLambda(this.props.createLambdaPath);
            this.createLambdaIntegration = new aws_apigateway_1.LambdaIntegration(this.createLambda);
        }
        if (this.props.readLambdaPath) {
            this.readLambda = this.createSingleLambda(this.props.readLambdaPath);
            this.readLambdaIntegration = new aws_apigateway_1.LambdaIntegration(this.readLambda);
        }
        if (this.props.updateLambdaPath) {
            this.updateLambda = this.createSingleLambda(this.props.updateLambdaPath);
            this.updateLambdaIntegration = new aws_apigateway_1.LambdaIntegration(this.updateLambda);
        }
        if (this.props.deleteLambdaPath) {
            this.deleteLambda = this.createSingleLambda(this.props.deleteLambdaPath);
            this.deleteLambdaIntegration = new aws_apigateway_1.LambdaIntegration(this.deleteLambda);
        }
    }
    grantTableRights() {
        if (this.createLambda) {
            this.table.grantWriteData(this.createLambda);
        }
        if (this.readLambda) {
            this.table.grantReadData(this.readLambda);
        }
        if (this.updateLambda) {
            this.table.grantWriteData(this.updateLambda);
        }
        if (this.deleteLambda) {
            this.table.grantWriteData(this.deleteLambda);
        }
    }
    createSingleLambda(lambdaName) {
        const lambdaId = `${this.props.tableName}-${lambdaName}`;
        return new aws_lambda_nodejs_1.NodejsFunction(this.stack, lambdaId, {
            entry: ((0, path_1.join)(__dirname, '..', 'services', this.props.tableName, `${lambdaName}.ts`)),
            handler: 'handler',
            functionName: lambdaId,
            environment: {
                TABLE_NAME: this.props.tableName,
                PRIMARY_KEY: this.props.primaryKey
            }
        });
    }
}
exports.GenericTable = GenericTable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2VuZXJpdGNUYWJsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkdlbmVyaXRjVGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkRBQWdFO0FBQ2hFLDZDQUFrRDtBQUNsRCxxRUFBK0Q7QUFDL0QsK0RBQStEO0FBQy9ELCtCQUE0QjtBQVc1QixNQUFhLFlBQVk7SUFnQnJCLFlBQW1CLEtBQVksRUFBRSxLQUFpQjtRQUM5QyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVPLFVBQVU7UUFDZCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFTyxXQUFXO1FBQ2YsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLG9CQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRTtZQUNyRCxZQUFZLEVBQUU7Z0JBQ1YsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVTtnQkFDM0IsSUFBSSxFQUFFLDRCQUFhLENBQUMsTUFBTTthQUM3QjtZQUNELFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVM7WUFDL0IsYUFBYSxFQUFFLDJCQUFhLENBQUMsT0FBTztTQUN2QyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU8sYUFBYTtRQUNqQixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUM7WUFDNUIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO1lBQ3hFLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLGtDQUFpQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUMzRTtRQUNELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQTtZQUNwRSxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxrQ0FBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDdkU7UUFDRCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUU7WUFDN0IsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO1lBQ3hFLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLGtDQUFpQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUMzRTtRQUNELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRTtZQUM3QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUE7WUFDeEUsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksa0NBQWlCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzNFO0lBQ0wsQ0FBQztJQUVPLGdCQUFnQjtRQUNwQixJQUFHLElBQUksQ0FBQyxZQUFZLEVBQUM7WUFDakIsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFBO1NBQy9DO1FBQ0QsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFDO1lBQ2hCLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtTQUM1QztRQUNELElBQUksSUFBSSxDQUFDLFlBQVksRUFBQztZQUNsQixJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUE7U0FDL0M7UUFDRCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUM7WUFDbEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFBO1NBQy9DO0lBQ0wsQ0FBQztJQUVPLGtCQUFrQixDQUFDLFVBQWtCO1FBQ3pDLE1BQU0sUUFBUSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLElBQUksVUFBVSxFQUFFLENBQUM7UUFDekQsT0FBTyxJQUFJLGtDQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUU7WUFDNUMsS0FBSyxFQUFFLENBQUMsSUFBQSxXQUFJLEVBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsR0FBRyxVQUFVLEtBQUssQ0FBQyxDQUFDO1lBQ3BGLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLFlBQVksRUFBRSxRQUFRO1lBQ3RCLFdBQVcsRUFBRTtnQkFDVCxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTO2dCQUNoQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVO2FBQ3JDO1NBQ0osQ0FBRSxDQUFBO0lBQ1AsQ0FBQztDQUNKO0FBckZELG9DQXFGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEF0dHJpYnV0ZVR5cGUsIFRhYmxlIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWR5bmFtb2RiJztcbmltcG9ydCB7IFJlbW92YWxQb2xpY3ksIFN0YWNrIH0gZnJvbSAnYXdzLWNkay1saWInXG5pbXBvcnQgeyBOb2RlanNGdW5jdGlvbiB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEtbm9kZWpzJztcbmltcG9ydCB7IExhbWJkYUludGVncmF0aW9uIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWFwaWdhdGV3YXknO1xuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRhYmxlUHJvcHMge1xuICAgIHRhYmxlTmFtZTogc3RyaW5nLFxuICAgIHByaW1hcnlLZXk6IHN0cmluZyxcbiAgICBjcmVhdGVMYW1iZGFQYXRoPzogc3RyaW5nLFxuICAgIHJlYWRMYW1iZGFQYXRoPzogc3RyaW5nLFxuICAgIHVwZGF0ZUxhbWJkYVBhdGg/OiBzdHJpbmcsXG4gICAgZGVsZXRlTGFtYmRhUGF0aD86IHN0cmluZ1xufVxuXG5leHBvcnQgY2xhc3MgR2VuZXJpY1RhYmxlIHtcblxuICAgIHByaXZhdGUgc3RhY2s6IFN0YWNrO1xuICAgIHByaXZhdGUgdGFibGU6IFRhYmxlO1xuICAgIHByaXZhdGUgcHJvcHM6IFRhYmxlUHJvcHM7XG5cbiAgICBwcml2YXRlIGNyZWF0ZUxhbWJkYTogTm9kZWpzRnVuY3Rpb24gfCB1bmRlZmluZWQ7XG4gICAgcHJpdmF0ZSByZWFkTGFtYmRhOiBOb2RlanNGdW5jdGlvbiB8IHVuZGVmaW5lZDtcbiAgICBwcml2YXRlIHVwZGF0ZUxhbWJkYTogTm9kZWpzRnVuY3Rpb24gfCB1bmRlZmluZWQ7XG4gICAgcHJpdmF0ZSBkZWxldGVMYW1iZGE6IE5vZGVqc0Z1bmN0aW9uIHwgdW5kZWZpbmVkO1xuXG4gICAgcHVibGljIGNyZWF0ZUxhbWJkYUludGVncmF0aW9uOiBMYW1iZGFJbnRlZ3JhdGlvbjtcbiAgICBwdWJsaWMgcmVhZExhbWJkYUludGVncmF0aW9uOiBMYW1iZGFJbnRlZ3JhdGlvbjtcbiAgICBwdWJsaWMgdXBkYXRlTGFtYmRhSW50ZWdyYXRpb246IExhbWJkYUludGVncmF0aW9uO1xuICAgIHB1YmxpYyBkZWxldGVMYW1iZGFJbnRlZ3JhdGlvbjogTGFtYmRhSW50ZWdyYXRpb247XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3Ioc3RhY2s6IFN0YWNrLCBwcm9wczogVGFibGVQcm9wcykge1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuc3RhY2sgPSBzdGFjaztcbiAgICAgICAgdGhpcy5pbml0aWFsaXplKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplKCl7XG4gICAgICAgIHRoaXMuY3JlYXRlVGFibGUoKTtcbiAgICAgICAgdGhpcy5jcmVhdGVMYW1iZGFzKCk7XG4gICAgICAgIHRoaXMuZ3JhbnRUYWJsZVJpZ2h0cygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlVGFibGUoKXtcbiAgICAgICAgdGhpcy50YWJsZSA9IG5ldyBUYWJsZSh0aGlzLnN0YWNrLCB0aGlzLnByb3BzLnRhYmxlTmFtZSwge1xuICAgICAgICAgICAgcGFydGl0aW9uS2V5OiB7XG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5wcm9wcy5wcmltYXJ5S2V5LFxuICAgICAgICAgICAgICAgIHR5cGU6IEF0dHJpYnV0ZVR5cGUuU1RSSU5HXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGFibGVOYW1lOiB0aGlzLnByb3BzLnRhYmxlTmFtZSxcbiAgICAgICAgICAgIHJlbW92YWxQb2xpY3k6IFJlbW92YWxQb2xpY3kuREVTVFJPWVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZUxhbWJkYXMoKXtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY3JlYXRlTGFtYmRhUGF0aCl7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUxhbWJkYSA9IHRoaXMuY3JlYXRlU2luZ2xlTGFtYmRhKHRoaXMucHJvcHMuY3JlYXRlTGFtYmRhUGF0aClcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlTGFtYmRhSW50ZWdyYXRpb24gPSBuZXcgTGFtYmRhSW50ZWdyYXRpb24odGhpcy5jcmVhdGVMYW1iZGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnJlYWRMYW1iZGFQYXRoKSB7XG4gICAgICAgICAgICB0aGlzLnJlYWRMYW1iZGEgPSB0aGlzLmNyZWF0ZVNpbmdsZUxhbWJkYSh0aGlzLnByb3BzLnJlYWRMYW1iZGFQYXRoKVxuICAgICAgICAgICAgdGhpcy5yZWFkTGFtYmRhSW50ZWdyYXRpb24gPSBuZXcgTGFtYmRhSW50ZWdyYXRpb24odGhpcy5yZWFkTGFtYmRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wcm9wcy51cGRhdGVMYW1iZGFQYXRoKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUxhbWJkYSA9IHRoaXMuY3JlYXRlU2luZ2xlTGFtYmRhKHRoaXMucHJvcHMudXBkYXRlTGFtYmRhUGF0aClcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTGFtYmRhSW50ZWdyYXRpb24gPSBuZXcgTGFtYmRhSW50ZWdyYXRpb24odGhpcy51cGRhdGVMYW1iZGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmRlbGV0ZUxhbWJkYVBhdGgpIHtcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlTGFtYmRhID0gdGhpcy5jcmVhdGVTaW5nbGVMYW1iZGEodGhpcy5wcm9wcy5kZWxldGVMYW1iZGFQYXRoKVxuICAgICAgICAgICAgdGhpcy5kZWxldGVMYW1iZGFJbnRlZ3JhdGlvbiA9IG5ldyBMYW1iZGFJbnRlZ3JhdGlvbih0aGlzLmRlbGV0ZUxhbWJkYSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdyYW50VGFibGVSaWdodHMoKXtcbiAgICAgICAgaWYodGhpcy5jcmVhdGVMYW1iZGEpe1xuICAgICAgICAgICAgdGhpcy50YWJsZS5ncmFudFdyaXRlRGF0YSh0aGlzLmNyZWF0ZUxhbWJkYSlcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5yZWFkTGFtYmRhKXtcbiAgICAgICAgICAgIHRoaXMudGFibGUuZ3JhbnRSZWFkRGF0YSh0aGlzLnJlYWRMYW1iZGEpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudXBkYXRlTGFtYmRhKXtcbiAgICAgICAgICAgIHRoaXMudGFibGUuZ3JhbnRXcml0ZURhdGEodGhpcy51cGRhdGVMYW1iZGEpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZGVsZXRlTGFtYmRhKXtcbiAgICAgICAgICAgIHRoaXMudGFibGUuZ3JhbnRXcml0ZURhdGEodGhpcy5kZWxldGVMYW1iZGEpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVNpbmdsZUxhbWJkYShsYW1iZGFOYW1lOiBzdHJpbmcpOiBOb2RlanNGdW5jdGlvbntcbiAgICAgICAgY29uc3QgbGFtYmRhSWQgPSBgJHt0aGlzLnByb3BzLnRhYmxlTmFtZX0tJHtsYW1iZGFOYW1lfWA7IFxuICAgICAgICByZXR1cm4gbmV3IE5vZGVqc0Z1bmN0aW9uKHRoaXMuc3RhY2ssIGxhbWJkYUlkLCB7XG4gICAgICAgICAgICBlbnRyeTogKGpvaW4oX19kaXJuYW1lLCAnLi4nLCAnc2VydmljZXMnLCB0aGlzLnByb3BzLnRhYmxlTmFtZSwgYCR7bGFtYmRhTmFtZX0udHNgKSksXG4gICAgICAgICAgICBoYW5kbGVyOiAnaGFuZGxlcicsXG4gICAgICAgICAgICBmdW5jdGlvbk5hbWU6IGxhbWJkYUlkLFxuICAgICAgICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgICAgICAgICBUQUJMRV9OQU1FOiB0aGlzLnByb3BzLnRhYmxlTmFtZSxcbiAgICAgICAgICAgICAgICBQUklNQVJZX0tFWTogdGhpcy5wcm9wcy5wcmltYXJ5S2V5XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gKVxuICAgIH1cbn0iXX0=