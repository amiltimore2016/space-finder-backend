"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenericTable = void 0;
const aws_dynamodb_1 = require("aws-cdk-lib/aws-dynamodb");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_lambda_nodejs_1 = require("aws-cdk-lib/aws-lambda-nodejs");
const aws_apigateway_1 = require("aws-cdk-lib/aws-apigateway");
const path_1 = require("path");
class GenericTable {
    constructor(stack, props) {
        this.props = props;
        this.stack = stack;
        this.initialize();
    }
    initialize() {
        this.createTable();
        this.addSecondaryIndexes();
        this.createLambdas();
        this.grantTableRights();
    }
    createTable() {
        this.table = new aws_dynamodb_1.Table(this.stack, this.props.tableName, {
            partitionKey: {
                name: this.props.primaryKey,
                type: aws_dynamodb_1.AttributeType.STRING
            },
            tableName: this.props.tableName,
            removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY
        });
    }
    addSecondaryIndexes() {
        if (this.props.secondaryIndexes) {
            for (const secondaryIndex of this.props.secondaryIndexes) {
                this.table.addGlobalSecondaryIndex({
                    indexName: secondaryIndex,
                    partitionKey: {
                        name: secondaryIndex,
                        type: aws_dynamodb_1.AttributeType.STRING
                    }
                });
            }
        }
    }
    createLambdas() {
        if (this.props.createLambdaPath) {
            this.createLambda = this.createSingleLambda(this.props.createLambdaPath);
            this.createLambdaIntegration = new aws_apigateway_1.LambdaIntegration(this.createLambda);
        }
        if (this.props.readLambdaPath) {
            this.readLambda = this.createSingleLambda(this.props.readLambdaPath);
            this.readLambdaIntegration = new aws_apigateway_1.LambdaIntegration(this.readLambda);
        }
        if (this.props.updateLambdaPath) {
            this.updateLambda = this.createSingleLambda(this.props.updateLambdaPath);
            this.updateLambdaIntegration = new aws_apigateway_1.LambdaIntegration(this.updateLambda);
        }
        if (this.props.deleteLambdaPath) {
            this.deleteLambda = this.createSingleLambda(this.props.deleteLambdaPath);
            this.deleteLambdaIntegration = new aws_apigateway_1.LambdaIntegration(this.deleteLambda);
        }
    }
    grantTableRights() {
        if (this.createLambda) {
            this.table.grantWriteData(this.createLambda);
        }
        if (this.readLambda) {
            this.table.grantReadData(this.readLambda);
        }
        if (this.updateLambda) {
            this.table.grantWriteData(this.updateLambda);
        }
        if (this.deleteLambda) {
            this.table.grantWriteData(this.deleteLambda);
        }
    }
    createSingleLambda(lambdaName) {
        const lambdaId = `${this.props.tableName}-${lambdaName}`;
        return new aws_lambda_nodejs_1.NodejsFunction(this.stack, lambdaId, {
            entry: ((0, path_1.join)(__dirname, '..', 'services', this.props.tableName, `${lambdaName}.ts`)),
            handler: 'handler',
            functionName: lambdaId,
            environment: {
                TABLE_NAME: this.props.tableName,
                PRIMARY_KEY: this.props.primaryKey
            }
        });
    }
}
exports.GenericTable = GenericTable;
//# sourceMappingURL=data:application/json;base64,