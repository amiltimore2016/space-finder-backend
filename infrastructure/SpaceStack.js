"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpaceStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const path_1 = require("path");
const aws_apigateway_1 = require("aws-cdk-lib/aws-apigateway");
const GeneritcTable_1 = require("./GeneritcTable");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
class SpaceStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.api = new aws_apigateway_1.RestApi(this, 'spaceApi');
        this.spacesTAble = new GeneritcTable_1.GenericTable('SpacesTable', 'spaceId', this);
        const helloLambdaWebpack = new aws_lambda_1.Function(this, 'helloLambdaWebpack', {
            runtime: aws_lambda_1.Runtime.NODEJS_16_X,
            code: aws_lambda_1.Code.fromAsset((0, path_1.join)(__dirname, '..', 'build', 'nodeHelloLambda')),
            handler: 'nodeHelloLambda.handler'
        });
        const nodeLambdaNodeJs = new aws_cdk_lib_1.aws_lambda_nodejs.NodejsFunction(this, 'helloLambdaNodjes', {
            entry: ((0, path_1.join)(__dirname, '..', 'services', 'node-lambda', 'hello.ts')),
            handler: 'handler',
            runtime: aws_lambda_1.Runtime.NODEJS_16_X
        });
        const s3ListPolicy = new aws_iam_1.PolicyStatement();
        s3ListPolicy.addActions('s3:ListAllMyBuckets');
        s3ListPolicy.addResources('*');
        nodeLambdaNodeJs.addToRolePolicy(s3ListPolicy);
        // Hello Api Lambda integration:
        const HelloLambdaIntegration = new aws_apigateway_1.LambdaIntegration(nodeLambdaNodeJs);
        const HelloLambdaResource = this.api.root.addResource('hello');
        HelloLambdaResource.addMethod('GET', HelloLambdaIntegration);
    }
}
exports.SpaceStack = SpaceStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3BhY2VTdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlNwYWNlU3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQW1FO0FBRW5FLHVEQUFtRjtBQUNuRiwrQkFBNEI7QUFDNUIsK0RBQXdFO0FBQ3hFLG1EQUErQztBQUMvQyxpREFBc0Q7QUFFdEQsTUFBYSxVQUFXLFNBQVEsbUJBQUs7SUFTakMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFpQjtRQUN2RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQVJwQixRQUFHLEdBQUcsSUFBSSx3QkFBTyxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNwQyxnQkFBVyxHQUFHLElBQUksNEJBQVksQ0FDbEMsYUFBYSxFQUNiLFNBQVMsRUFDVCxJQUFJLENBQ1AsQ0FBQTtRQUtHLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxxQkFBYyxDQUFDLElBQUksRUFBRSxvQkFBb0IsRUFBRTtZQUN0RSxPQUFPLEVBQUUsb0JBQU8sQ0FBQyxXQUFXO1lBQzVCLElBQUksRUFBRSxpQkFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFBLFdBQUksRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1lBQ3ZFLE9BQU8sRUFBRSx5QkFBeUI7U0FDckMsQ0FBQyxDQUFBO1FBRUYsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLCtCQUFpQixDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLEVBQUU7WUFDckYsS0FBSyxFQUFFLENBQUMsSUFBQSxXQUFJLEVBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ3JFLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLE9BQU8sRUFBRSxvQkFBTyxDQUFDLFdBQVc7U0FDL0IsQ0FBQyxDQUFBO1FBRUYsTUFBTSxZQUFZLEdBQUcsSUFBSSx5QkFBZSxFQUFFLENBQUM7UUFDM0MsWUFBWSxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQy9DLFlBQVksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDOUIsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRS9DLGdDQUFnQztRQUNoQyxNQUFNLHNCQUFzQixHQUFHLElBQUksa0NBQWlCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUN2RSxNQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvRCxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLHNCQUFzQixDQUFDLENBQUM7SUFDakUsQ0FBQztDQUNKO0FBbENELGdDQWtDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YWNrLCBTdGFja1Byb3BzLCBhd3NfbGFtYmRhX25vZGVqcyB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgQ29kZSwgRnVuY3Rpb24gYXMgTGFtYmRhRnVuY3Rpb24sIFJ1bnRpbWUgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhJztcbmltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcbmltcG9ydCB7IExhbWJkYUludGVncmF0aW9uLCBSZXN0QXBpIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWFwaWdhdGV3YXknO1xuaW1wb3J0IHsgR2VuZXJpY1RhYmxlIH0gZnJvbSAnLi9HZW5lcml0Y1RhYmxlJztcbmltcG9ydCB7IFBvbGljeVN0YXRlbWVudCB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuXG5leHBvcnQgY2xhc3MgU3BhY2VTdGFjayBleHRlbmRzIFN0YWNre1xuXG4gICAgcHJpdmF0ZSBhcGkgPSBuZXcgUmVzdEFwaSh0aGlzLCAnc3BhY2VBcGknKTtcbiAgICBwcml2YXRlIHNwYWNlc1RBYmxlID0gbmV3IEdlbmVyaWNUYWJsZShcbiAgICAgICAgJ1NwYWNlc1RhYmxlJyxcbiAgICAgICAgJ3NwYWNlSWQnLFxuICAgICAgICB0aGlzXG4gICAgKVxuXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFN0YWNrUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICAgICAgY29uc3QgaGVsbG9MYW1iZGFXZWJwYWNrID0gbmV3IExhbWJkYUZ1bmN0aW9uKHRoaXMsICdoZWxsb0xhbWJkYVdlYnBhY2snLCB7XG4gICAgICAgICAgICBydW50aW1lOiBSdW50aW1lLk5PREVKU18xNl9YLFxuICAgICAgICAgICAgY29kZTogQ29kZS5mcm9tQXNzZXQoam9pbihfX2Rpcm5hbWUsICcuLicsICdidWlsZCcsICdub2RlSGVsbG9MYW1iZGEnKSksXG4gICAgICAgICAgICBoYW5kbGVyOiAnbm9kZUhlbGxvTGFtYmRhLmhhbmRsZXInXG4gICAgICAgIH0pXG5cbiAgICAgICAgY29uc3Qgbm9kZUxhbWJkYU5vZGVKcyA9IG5ldyBhd3NfbGFtYmRhX25vZGVqcy5Ob2RlanNGdW5jdGlvbih0aGlzLCAnaGVsbG9MYW1iZGFOb2RqZXMnLCB7XG4gICAgICAgICAgICBlbnRyeTogKGpvaW4oX19kaXJuYW1lLCAnLi4nLCAnc2VydmljZXMnLCAnbm9kZS1sYW1iZGEnLCAnaGVsbG8udHMnKSksXG4gICAgICAgICAgICBoYW5kbGVyOiAnaGFuZGxlcicsXG4gICAgICAgICAgICBydW50aW1lOiBSdW50aW1lLk5PREVKU18xNl9YXG4gICAgICAgIH0pXG5cbiAgICAgICAgY29uc3QgczNMaXN0UG9saWN5ID0gbmV3IFBvbGljeVN0YXRlbWVudCgpO1xuICAgICAgICBzM0xpc3RQb2xpY3kuYWRkQWN0aW9ucygnczM6TGlzdEFsbE15QnVja2V0cycpO1xuICAgICAgICBzM0xpc3RQb2xpY3kuYWRkUmVzb3VyY2VzKCcqJylcbiAgICAgICAgbm9kZUxhbWJkYU5vZGVKcy5hZGRUb1JvbGVQb2xpY3koczNMaXN0UG9saWN5KTtcblxuICAgICAgICAvLyBIZWxsbyBBcGkgTGFtYmRhIGludGVncmF0aW9uOlxuICAgICAgICBjb25zdCBIZWxsb0xhbWJkYUludGVncmF0aW9uID0gbmV3IExhbWJkYUludGVncmF0aW9uKG5vZGVMYW1iZGFOb2RlSnMpO1xuICAgICAgICBjb25zdCBIZWxsb0xhbWJkYVJlc291cmNlID0gdGhpcy5hcGkucm9vdC5hZGRSZXNvdXJjZSgnaGVsbG8nKTtcbiAgICAgICAgSGVsbG9MYW1iZGFSZXNvdXJjZS5hZGRNZXRob2QoJ0dFVCcsIEhlbGxvTGFtYmRhSW50ZWdyYXRpb24pO1xuICAgIH1cbn0iXX0=