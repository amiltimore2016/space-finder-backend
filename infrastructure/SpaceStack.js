"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpaceStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const path_1 = require("path");
const aws_apigateway_1 = require("aws-cdk-lib/aws-apigateway");
const GeneritcTable_1 = require("./GeneritcTable");
class SpaceStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.api = new aws_apigateway_1.RestApi(this, 'spaceApi');
        this.spacesTAble = new GeneritcTable_1.GenericTable('SpacesTable', 'spaceId', this);
        const helloLambda = new aws_lambda_1.Function(this, 'helloLambda', {
            runtime: aws_lambda_1.Runtime.NODEJS_16_X,
            code: aws_lambda_1.Code.fromAsset((0, path_1.join)(__dirname, '..', 'services', 'hello')),
            handler: 'hello.main'
        });
        const nodeLambdaNodeJs = new aws_cdk_lib_1.aws_lambda_nodejs.NodejsFunction(this, 'helloLambdaNodjes', {
            entry: ((0, path_1.join)(__dirname, '..', 'services', 'node-lambda', 'hello.ts')),
            handler: 'handler',
            runtime: aws_lambda_1.Runtime.NODEJS_16_X
        });
        // Hello Api Lambda integration:
        const HelloLambdaIntegration = new aws_apigateway_1.LambdaIntegration(helloLambda);
        const HelloLambdaResource = this.api.root.addResource('hello');
        HelloLambdaResource.addMethod('GET', HelloLambdaIntegration);
    }
}
exports.SpaceStack = SpaceStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3BhY2VTdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlNwYWNlU3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQW1FO0FBRW5FLHVEQUFtRjtBQUNuRiwrQkFBNEI7QUFDNUIsK0RBQXdFO0FBQ3hFLG1EQUErQztBQUUvQyxNQUFhLFVBQVcsU0FBUSxtQkFBSztJQVNqQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQWlCO1FBQ3ZELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBUnBCLFFBQUcsR0FBRyxJQUFJLHdCQUFPLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3BDLGdCQUFXLEdBQUcsSUFBSSw0QkFBWSxDQUNsQyxhQUFhLEVBQ2IsU0FBUyxFQUNULElBQUksQ0FDUCxDQUFBO1FBS0csTUFBTSxXQUFXLEdBQUcsSUFBSSxxQkFBYyxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUU7WUFDeEQsT0FBTyxFQUFFLG9CQUFPLENBQUMsV0FBVztZQUM1QixJQUFJLEVBQUUsaUJBQUksQ0FBQyxTQUFTLENBQUMsSUFBQSxXQUFJLEVBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDaEUsT0FBTyxFQUFFLFlBQVk7U0FDeEIsQ0FBQyxDQUFBO1FBRUYsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLCtCQUFpQixDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLEVBQUU7WUFDckYsS0FBSyxFQUFFLENBQUMsSUFBQSxXQUFJLEVBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ3JFLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLE9BQU8sRUFBRSxvQkFBTyxDQUFDLFdBQVc7U0FDL0IsQ0FBQyxDQUFBO1FBRUYsZ0NBQWdDO1FBQ2hDLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxrQ0FBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNsRSxNQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvRCxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLHNCQUFzQixDQUFDLENBQUM7SUFDakUsQ0FBQztDQUNKO0FBN0JELGdDQTZCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YWNrLCBTdGFja1Byb3BzLCBhd3NfbGFtYmRhX25vZGVqcyB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgQ29kZSwgRnVuY3Rpb24gYXMgTGFtYmRhRnVuY3Rpb24sIFJ1bnRpbWUgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhJztcbmltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcbmltcG9ydCB7IExhbWJkYUludGVncmF0aW9uLCBSZXN0QXBpIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWFwaWdhdGV3YXknO1xuaW1wb3J0IHsgR2VuZXJpY1RhYmxlIH0gZnJvbSAnLi9HZW5lcml0Y1RhYmxlJztcblxuZXhwb3J0IGNsYXNzIFNwYWNlU3RhY2sgZXh0ZW5kcyBTdGFja3tcblxuICAgIHByaXZhdGUgYXBpID0gbmV3IFJlc3RBcGkodGhpcywgJ3NwYWNlQXBpJyk7XG4gICAgcHJpdmF0ZSBzcGFjZXNUQWJsZSA9IG5ldyBHZW5lcmljVGFibGUoXG4gICAgICAgICdTcGFjZXNUYWJsZScsXG4gICAgICAgICdzcGFjZUlkJyxcbiAgICAgICAgdGhpcyxcbiAgICApXG5cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogU3RhY2tQcm9wcykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgICAgICBjb25zdCBoZWxsb0xhbWJkYSA9IG5ldyBMYW1iZGFGdW5jdGlvbih0aGlzLCAnaGVsbG9MYW1iZGEnLCB7XG4gICAgICAgICAgICBydW50aW1lOiBSdW50aW1lLk5PREVKU18xNl9YLFxuICAgICAgICAgICAgY29kZTogQ29kZS5mcm9tQXNzZXQoam9pbihfX2Rpcm5hbWUsICcuLicsICdzZXJ2aWNlcycsICdoZWxsbycpKSxcbiAgICAgICAgICAgIGhhbmRsZXI6ICdoZWxsby5tYWluJ1xuICAgICAgICB9KVxuXG4gICAgICAgIGNvbnN0IG5vZGVMYW1iZGFOb2RlSnMgPSBuZXcgYXdzX2xhbWJkYV9ub2RlanMuTm9kZWpzRnVuY3Rpb24odGhpcywgJ2hlbGxvTGFtYmRhTm9kamVzJywge1xuICAgICAgICAgICAgZW50cnk6IChqb2luKF9fZGlybmFtZSwgJy4uJywgJ3NlcnZpY2VzJywgJ25vZGUtbGFtYmRhJywgJ2hlbGxvLnRzJykpLFxuICAgICAgICAgICAgaGFuZGxlcjogJ2hhbmRsZXInLFxuICAgICAgICAgICAgcnVudGltZTogUnVudGltZS5OT0RFSlNfMTZfWFxuICAgICAgICB9KVxuXG4gICAgICAgIC8vIEhlbGxvIEFwaSBMYW1iZGEgaW50ZWdyYXRpb246XG4gICAgICAgIGNvbnN0IEhlbGxvTGFtYmRhSW50ZWdyYXRpb24gPSBuZXcgTGFtYmRhSW50ZWdyYXRpb24oaGVsbG9MYW1iZGEpO1xuICAgICAgICBjb25zdCBIZWxsb0xhbWJkYVJlc291cmNlID0gdGhpcy5hcGkucm9vdC5hZGRSZXNvdXJjZSgnaGVsbG8nKTtcbiAgICAgICAgSGVsbG9MYW1iZGFSZXNvdXJjZS5hZGRNZXRob2QoJ0dFVCcsIEhlbGxvTGFtYmRhSW50ZWdyYXRpb24pO1xuICAgIH1cbn0iXX0=