"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const aws_sdk_1 = require("aws-sdk");
const TABLE_NAME = process.env.TABLE_NAME;
const PRIMARY_KEY = process.env.PRIMARY_KEY;
const dbClient = new aws_sdk_1.DynamoDB.DocumentClient();
async function handler(event, context) {
    const result = {
        statusCode: 200,
        body: 'Hello from DynamoDB'
    };
    try {
        if (event.queryStringParameters) {
            if (PRIMARY_KEY in event.queryStringParameters) {
                const keyValue = event.queryStringParameters[PRIMARY_KEY];
                const queryResponse = await dbClient.query({
                    TableName: TABLE_NAME,
                    KeyConditionExpression: '#zz = :zzzz',
                    ExpressionAttributeNames: {
                        '#zz': PRIMARY_KEY
                    },
                    ExpressionAttributeValues: {
                        ':zzzz': keyValue
                    }
                }).promise();
                result.body = JSON.stringify(queryResponse);
            }
        }
        else {
            const queryResponse = await dbClient.scan({
                TableName: TABLE_NAME,
            }).promise();
            result.body = JSON.stringify(queryResponse);
        }
    }
    catch (error) {
        if (error instanceof Error) {
            result.body = error.message;
        }
    }
    return result;
}
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVhZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlJlYWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQWtDO0FBSWxDLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDO0FBQzFDLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDO0FBQzVDLE1BQU0sUUFBUSxHQUFHLElBQUksa0JBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUUvQyxLQUFLLFVBQVUsT0FBTyxDQUFDLEtBQTJCLEVBQUUsT0FBZ0I7SUFDaEUsTUFBTSxNQUFNLEdBQTBCO1FBQ2xDLFVBQVUsRUFBRSxHQUFHO1FBQ2YsSUFBSSxFQUFFLHFCQUFxQjtLQUM5QixDQUFBO0lBQ0QsSUFBSTtRQUNBLElBQUksS0FBSyxDQUFDLHFCQUFxQixFQUFFO1lBQzdCLElBQUksV0FBWSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsRUFBRTtnQkFDN0MsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLHFCQUFxQixDQUFDLFdBQVksQ0FBQyxDQUFDO2dCQUMzRCxNQUFNLGFBQWEsR0FBRyxNQUFNLFFBQVEsQ0FBQyxLQUFLLENBQUM7b0JBQ3ZDLFNBQVMsRUFBRSxVQUFXO29CQUN0QixzQkFBc0IsRUFBRSxhQUFhO29CQUNyQyx3QkFBd0IsRUFBRTt3QkFDdEIsS0FBSyxFQUFFLFdBQVk7cUJBQ3RCO29CQUNELHlCQUF5QixFQUFFO3dCQUN2QixPQUFPLEVBQUUsUUFBUTtxQkFDcEI7aUJBQ0osQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUNiLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQTthQUM5QztTQUNKO2FBQU07WUFDSCxNQUFNLGFBQWEsR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUM7Z0JBQ3RDLFNBQVMsRUFBRSxVQUFXO2FBQ3pCLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtZQUNaLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUMvQztLQUNKO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDWixJQUFJLEtBQUssWUFBWSxLQUFLLEVBQUU7WUFDNUIsTUFBTSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFBO1NBQzFCO0tBQ0o7SUFDRCxPQUFPLE1BQU0sQ0FBQTtBQUNqQixDQUFDO0FBRVEsMEJBQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEeW5hbW9EQiB9IGZyb20gJ2F3cy1zZGsnXG5pbXBvcnQgeyBBUElHYXRld2F5UHJveHlFdmVudCwgQVBJR2F0ZXdheVByb3h5UmVzdWx0LCBDb250ZXh0IH0gZnJvbSAnYXdzLWxhbWJkYSdcblxuXG5jb25zdCBUQUJMRV9OQU1FID0gcHJvY2Vzcy5lbnYuVEFCTEVfTkFNRTtcbmNvbnN0IFBSSU1BUllfS0VZID0gcHJvY2Vzcy5lbnYuUFJJTUFSWV9LRVk7XG5jb25zdCBkYkNsaWVudCA9IG5ldyBEeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xuXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVyKGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudCwgY29udGV4dDogQ29udGV4dCk6IFByb21pc2U8QVBJR2F0ZXdheVByb3h5UmVzdWx0PntcbiAgICBjb25zdCByZXN1bHQ6IEFQSUdhdGV3YXlQcm94eVJlc3VsdCA9IHtcbiAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICBib2R5OiAnSGVsbG8gZnJvbSBEeW5hbW9EQidcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKGV2ZW50LnF1ZXJ5U3RyaW5nUGFyYW1ldGVycykge1xuICAgICAgICAgICAgaWYgKFBSSU1BUllfS0VZISBpbiBldmVudC5xdWVyeVN0cmluZ1BhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXlWYWx1ZSA9IGV2ZW50LnF1ZXJ5U3RyaW5nUGFyYW1ldGVyc1tQUklNQVJZX0tFWSFdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHF1ZXJ5UmVzcG9uc2UgPSBhd2FpdCBkYkNsaWVudC5xdWVyeSh7XG4gICAgICAgICAgICAgICAgICAgIFRhYmxlTmFtZTogVEFCTEVfTkFNRSEsXG4gICAgICAgICAgICAgICAgICAgIEtleUNvbmRpdGlvbkV4cHJlc3Npb246ICcjenogPSA6enp6eicsXG4gICAgICAgICAgICAgICAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJyN6eic6IFBSSU1BUllfS0VZIVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnOnp6enonOiBrZXlWYWx1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkucHJvbWlzZSgpO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5ib2R5ID0gSlNPTi5zdHJpbmdpZnkocXVlcnlSZXNwb25zZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5UmVzcG9uc2UgPSBhd2FpdCBkYkNsaWVudC5zY2FuKHtcbiAgICAgICAgICAgICAgICBUYWJsZU5hbWU6IFRBQkxFX05BTUUhLFxuICAgICAgICAgICAgfSkucHJvbWlzZSgpXG4gICAgICAgICAgICByZXN1bHQuYm9keSA9IEpTT04uc3RyaW5naWZ5KHF1ZXJ5UmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgcmVzdWx0LmJvZHkgPSBlcnJvci5tZXNzYWdlXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxufVxuXG5leHBvcnQgeyBoYW5kbGVyIH0iXX0=